// {{path.summary}} - {{path.description}}
{{#if path.deprecated}}
// DEPRECATED
{{/if}}
it('{{path.method}} {{apiDocs.basePath}}{{path.path}}', function() {
    {{#if (has_param_type path.parameters "body")}}
    this.requestBody =
    {{print_schema (find_body_schema path.parameters)}};
    {{/if}}
    this.params = {
        {{#each path.parameters}}
        {{name}}: {{param_value .}}{{#unless @last}},{{/unless}} // in = {{in}}, description = {{description}}, required = {{required}}, type = {{type}}, default = {{default}}, enum = {{enum}}
        {{/each}}
    };
    
    return Promise.resolve().then(() => {
        return testSetup.call(this);
    }).then(() => {
        return client.restRequest({
            method: '{{path.method}}',
            path: `{{apiDocs.basePath}}{{replace_path_params path.path}}`,
            {{#if (has_param_type path.parameters "query")}}
            params: {
                {{#each (filter_by_param_type path.parameters "query")}}
                {{name}}: this.params.{{name}}{{#unless @last}},{{/unless}}
                {{/each}}
            }{{#if (has_param_type path.parameters "body")}},{{/if}}
            {{/if}}
            {{#if (has_param_type path.parameters "body")}}
            data: this.requestBody
            {{/if}}
        });
    }).then(response => {
        {{#with (find_success_response path.responses)}}
        // {{description}}
        assert.strictEqual(response.status, {{statusCode}});
        {{#if schema}}
        {{>assert schema data_path="response.data" message="data"}}
        {{/if}}
        {{/with}}
    }).finally(() => {
        return testTeardown.call(this).catch(noop);
    });
});
